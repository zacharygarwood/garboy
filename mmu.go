package main

import (
	"fmt"
)

var BOOT_ROM = [256]byte{
	0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
	0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
	0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
	0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
	0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
	0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
	0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
	0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
	0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
	0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
	0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
	0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
	0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
	0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
	0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
	0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50,
}

type MMU struct {
	cartridge *Cartridge
	ppu       *PPU
	wram      Memory
	hram      Memory
	io        Memory
	ie        Memory

	bootROM        Memory
	bootROMEnabled bool
}

func NewMMU(cart *Cartridge, ppu *PPU) *MMU {
	return &MMU{
		cartridge:      cart,
		ppu:            ppu,
		wram:           NewRAM(0x2000),
		hram:           NewRAM(0x7F),
		io:             NewIORegisters(),
		ie:             NewInterruptRegister(),
		bootROM:        NewROM(BOOT_ROM[:]),
		bootROMEnabled: true, // TODO: figure out when to turn this off
	}
}

func (m *MMU) Read(address uint16) byte {
	switch {
	case address < 0xFF && m.bootROMEnabled:
		return m.bootROM.Read(address)
	case address < 0x4000:
		return m.cartridge.ReadROM(address)
	case address < 0x8000:
		return m.cartridge.ReadROM(address)
	case address < 0xA000:
		return m.ppu.ReadVRAM(address - 0x8000)
	case address < 0xC000:
		return m.cartridge.ReadRAM(address - 0xA000)
	case address < 0xE000:
		return m.wram.Read(address - 0xC000)
	case address < 0xFE00:
		return m.wram.Read(address - 0xE000) // Echo RAM
	case address < 0xFEA0:
		return m.ppu.ReadOAM(address - 0xFE00)
	case address < 0xFF00:
		return 0xFF // Not usable
	case address < 0xFF80:
		// FIXME: Only used for GB Doctor's tests
		if address == 0xFF44 {
			return 0x90
		}
		return m.io.Read(address - 0xFF00)
	case address < 0xFFFF:
		return m.hram.Read(address - 0xFF80)
	case address == 0xFFFF:
		return m.ie.Read(0)
	default:
		panic("Should not be reading past 0xFFFF")
	}
}

func (m *MMU) Write(address uint16, val byte) {
	switch {
	case address < 0x4000:
		m.cartridge.WriteROM(address, val)
	case address < 0x8000:
		m.cartridge.WriteROM(address-0x4000, val)
	case address < 0xA000:
		m.ppu.WriteVRAM(address-0x8000, val)
	case address < 0xC000:
		m.cartridge.WriteRAM(address-0xA000, val)
	case address < 0xE000:
		m.wram.Write(address-0xC000, val)
	case address < 0xFE00:
		m.wram.Write(address-0xE000, val) // Echo RAM
	case address < 0xFEA0:
		m.ppu.WriteOAM(address-0xFE00, val)
	case address < 0xFF00:
		return // Not usable
	case address < 0xFF80:
		// FIXME: Used for Blargg's CPU tests https://emudev.de/gameboy-emulator/testing-our-cpu/
		if address == 0xFF02 && val == 0x81 {
			out := m.Read(0xFF01)
			fmt.Printf("%c", out)
			return
		}
		if m.bootROMEnabled && address == 0xFF50 && val != 0 {
			m.bootROMEnabled = false
		} else {
			m.io.Write(address-0xFF00, val)
		}
	case address < 0xFFFF:
		m.hram.Write(address-0xFF80, val)
	case address == 0xFFFF:
		m.ie.Write(0, val)
	default:
		panic("Should not be reading past 0xFFFF")
	}
}

func (m *MMU) ReadWord(address uint16) uint16 {
	lo := m.Read(address)
	hi := m.Read(address + 1)

	return (uint16(hi) << 8) + uint16(lo)
}

func (m *MMU) WriteWord(address uint16, val uint16) {
	hi := uint8((val >> 8) & 0xFF)
	lo := uint8(val & 0xFF)

	m.Write(address, lo)
	m.Write(address+1, hi)
}
